client_id=GLOBAL
client_secret=uCatiIohQQqIucNJomtgjdhZRZQEJx9D
username=to.chile
password=P@ssw0rd
//grant_type=refresh_token


<!--<build>-->
        <!--<plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>7</source>
                    <target>7</target>
                </configuration>
            </plugin>
        </plugins>-->



        <!--<plugins>
         Configure the Maven compiler plugin to include the timestamp
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>3.8.1</version>
            <configuration>
                <source>1.8</source>
                <target>1.8</target>
                <compilerArgs>
                    <arg>-Dmaven.build.timestamp=${maven.build.timestamp}</arg>
                </compilerArgs>
            </configuration>
        </plugin-->>

            <!--<plugin>
                <groupId>io.qameta.allure</groupId>
                <artifactId>allure-maven</artifactId>
                <version>2.10.0</version>
                <configuration>
                    &lt;!&ndash; Set the results directory with timestamp &ndash;&gt;
                    <resultsDirectory>${project.build.directory}/allure-results/${timestamp}</resultsDirectory>
                </configuration>
            </plugin>-->
        <!--</plugins>-->
    <!--</build>-->













package com.dpworld.test;

import com.qa.Rest.api.RestCalls;
import com.qa.Rest.auto.SearchCall;
import io.restassured.response.Response;
import org.testng.annotations.Test;

import com.dpworld.test.StatusCode;
import java.io.IOException;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.equalTo;

;

public class SearchContApptTest extends SearchCall  {
    Response response;
   SearchCall s= new SearchCall();
    /*Properties p = PropertyUtils.propertyLoader("C:\\Users\\tausi\\OneDrive - DP World\\Desktop\\Taqdis\\DP_World\\VBS_ApiAutomation\\src\\main\\resources\\Data.properties");
    String filePath
            = "C:\\Users\\tausi\\OneDrive - DP World\\Desktop\\Taqdis\\DP_World\\VBS_ApiAutomation\\src\\main\\java\\com\\qa\\Rest\\Payload\\SearchApi.Json";
    File file = new File(filePath);*/


    @Test
    public void SearchContApptBy_RefNo() throws IOException {

        /*s.SetSearchPayload("ccsIdOrContNoOrContApptNo",p.getProperty("ccsIdOrContNoOrContApptNo"));
            String filePath
                    = "C:\\Users\\tausi\\OneDrive - DP World\\Desktop\\Taqdis\\DP_World\\VBS_ApiAutomation\\src\\main\\java\\com\\qa\\Rest\\Payload\\SearchApi.Json";
            File file = new File(filePath);
             response = RestAssured.given().
                     contentType(ContentType.JSON).header("Authorization", "Bearer" + TokenManager.getToken()).header("Content-Type", "application/json").
                    // log().all()
                     when().
                    body(file).
                    post("https://gluatapi-community.dpworld.com/vbs/containerappointment/search");
            System.out.println("API response body = " + response.getBody().asString());
            Assert.assertEquals(response.getStatusCode(), 200,
                    "Correct status code returned");
        JsonPath j=response.jsonPath();
        String a = j.get("referenceNo");
        Assert.assertEquals(j.getString("list[0].referenceNo"),p.getProperty("ccsIdOrContNoOrContApptNo"));*/


        s.SetSearchPayload("ccsIdOrContNoOrContApptNo",p.getProperty("ccsIdOrContNoOrContApptNo"));
        Response response = RestCalls.post(file);
        StatusCode.assertStatusCode(response.statusCode(), StatusCode.CODE_200);



    }



}



*mapper1 =  objectMapper.readValue(new File(SEARCH_API_JSON),
             new TypeReference<Map<String,Object>>(){});

        ObjectNode objNode= objectMapper.createObjectNode();
        ArrayNode namesNode = objNode.arrayNode();
        namesNode.add("Cancelled");
        mapper1.put("status",namesNode);
        String jsonRequest = objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(mapper1);
        logger.info(jsonRequest);
        Response response = RestCalls.post(mapper1);
        System.out.println("API response body = " + response.getBody().asString());
        // StatusCode.assertStatusCode(response.statusCode(), StatusCode.CODE_200);
        //StatusCode.assert_JsonSchemaValidator(response,SEARCH_API_JSON);
        //StatusCode.getAllHeaders(response);
        Assertions.assertStatusCode(response.statusCode(), Assertions.StatusCODE_200);*/



/*ObjectMapper objectMapper = new ObjectMapper();
        mapper1 =  objectMapper.readValue(new File(SEARCH_API_JSON),
                new TypeReference<Map<String,Object>>(){});
        String jsonRequest;

        jsonRequest = objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(mapper1);
        System.out.println(jsonRequest);*/


        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




         <!--<build>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <configuration>
                        <source>7</source>
                        <target>7</target>
                    </configuration>
                </plugin>
            </plugins>
            </build>-->


            <!--<build>  &lt;!&ndash;This is working set&ndash;&gt;
                <plugins>
                     &lt;!&ndash;Configure the Maven compiler plugin to include the timestamp&ndash;&gt;
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <version>3.8.1</version>
                        <configuration>
                            <source>1.8</source>
                            <target>1.8</target>
                            <compilerArgs>
                                <arg>-DMaven.build.timestamp=${maven.build.timestamp}</arg>
                            </compilerArgs>
                        </configuration>
                    </plugin>

            <plugin>
                <groupId>io.qameta.allure</groupId>
                <artifactId>allure-maven</artifactId>
                <version>2.10.0</version>
                <configuration>
                    &lt;!&ndash; Set the results directory with timestamp &ndash;&gt;
                    <resultsDirectory>${project.build.directory}/allure-results/${maven.build.timestamp.format}</resultsDirectory>
                </configuration>
            </plugin>
            </plugins>
            </build> &lt;!&ndash;This is one workin set&ndash;&gt;-->

            <!--<build>
                &lt;!&ndash;<plugins>
                    &lt;!&ndash; Configure the Maven compiler plugin to include the timestamp &ndash;&gt;
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <version>3.8.1</version>
                        <configuration>
                            <source>1.8</source>
                            <target>1.8</target>
                        </configuration>
                    </plugin>

                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-resources-plugin</artifactId>
                        <version>3.2.0</version>
                        <executions>
                            <execution>
                                <id>copy-folder</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${project.build.directory}/src/main/resources</outputDirectory>
                                    <resources>
                                        <resource>
                                            <filtering>false</filtering>
                                            <directory>${project.basedir}/target/folders</directory>
                                        </resource>
                                    </resources>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>&ndash;&gt;


                    &lt;!&ndash; Configure the build-helper-maven-plugin to generate a timestamp &ndash;&gt;
                    &lt;!&ndash;<plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>build-helper-maven-plugin</artifactId>
                        <version>3.5.0</version>
                        <executions>
                            <execution>
                                <id>timestamp-property</id>
                                <goals>
                                    <goal>timestamp-property</goal>
                                </goals>
                                <configuration>
                                    <name>maven.build.timestamp</name>
                                    <pattern>${timestamp.format}</pattern>
                                    <unit>yyyyMMdd-HMass</unit>
                                    <outputDirectory>${project.build.directory}</outputDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>&ndash;&gt;

                    &lt;!&ndash; Configure the Allure Maven plugin &ndash;&gt;
                    &lt;!&ndash;<plugin>
                        <groupId>io.qameta.allure</groupId>
                        <artifactId>allure-maven</artifactId>
                        <version>2.10.0</version> &lt;!&ndash; Update to the latest version &ndash;&gt;
                        <configuration>
                            &lt;!&ndash; Set the results directory with timestamp &ndash;&gt;
                            <reportVersion>2.14.0</reportVersion>
                            <resultsDirectory>${project.build.directory}/allure-results/${maven.build.timestamp}</resultsDirectory>
                        </configuration>
                    </plugin>&ndash;&gt;
                </plugins>
            </build>-->
